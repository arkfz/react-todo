{"version":3,"sources":["UsersList.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["UsersList","users","this","props","onRemove","react_default","a","createElement","map","user","key","id","onClick","name","Component","Users","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","removeUser","usersList","state","filter","setState","e","preventDefault","inputValue","value","Date","now","push","_this2","className","onSubmit","addUser","type","placeholder","ref","input","src_UsersList","App","src_Users","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmBeA,0LAfP,IAAMC,EAAQC,KAAKC,MAAMF,MACnBG,EAAWF,KAAKC,MAAMC,SAE5B,OACIC,EAAAC,EAAAC,cAAA,UACKN,EAAMO,IAAI,SAAAC,GAAI,OAEPJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,EAAKE,GAAIC,QAAS,kBAAMR,EAASK,EAAKE,MAAMF,EAAKI,gBAT1DC,cC4FTC,cA1FX,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KAwBVmB,WAAa,SAACX,GACV,IAAIY,EAAYP,EAAKQ,MAAMD,UAAUE,OAAO,SAAAhB,GAAI,OAAIA,EAAKE,KAAOA,IAEhEK,EAAKU,SAAS,CAAEH,eAzBhBP,EAAKQ,MAAQ,CACTD,UAAW,IAJAP,uEASXW,GACJA,EAAEC,iBAEF,IAAIL,EAAYrB,KAAKsB,MAAMD,UACvBd,EAAO,CACPI,KAAMX,KAAK2B,WAAWC,MACtBnB,GAAIoB,KAAKC,OAGbT,EAAUU,KAAKxB,GAEfP,KAAKwB,SAAS,CAAEH,cAEhBrB,KAAK2B,WAAWC,MAAQ,oCAsCnB,IAAAI,EAAAhC,KACL,OACIG,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACX9B,EAAAC,EAAAC,cAAA,oBAAcF,EAAAC,EAAAC,cAAA,0BAEdF,EAAAC,EAAAC,cAAA,QAAM6B,SAAU,SAAAT,GAAC,OAAIO,EAAKG,QAAQV,KAC9BtB,EAAAC,EAAAC,cAAA,SACI+B,KAAK,OACLC,YAAY,0BACZC,IAAK,SAAAC,GAAK,OAAIP,EAAKL,WAAaY,KAEpCpC,EAAAC,EAAAC,cAAA,sBAUJF,EAAAC,EAAAC,cAACmC,EAAD,CACIzC,MAAOC,KAAKsB,MAAMD,UAClBnB,SAAUF,KAAKoB,qBApFfR,aCYL6B,mLARX,OACEtC,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAACqC,EAAD,cALU9B,aCQE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8b177f85.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass UsersList extends Component {\r\n    render() {\r\n        const users = this.props.users;\r\n        const onRemove = this.props.onRemove\r\n\r\n        return (\r\n            <ul>\r\n                {users.map(user =>\r\n                    \r\n                        <li key={user.id} onClick={() => onRemove(user.id)}>{user.name}</li>\r\n                    \r\n                )}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UsersList;","import React, { Component } from 'react';\r\nimport UsersList from './UsersList';\r\n\r\nclass Users extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            usersList: [],\r\n            // searchUsersList\r\n        }\r\n    }\r\n\r\n    addUser(e) {\r\n        e.preventDefault();\r\n\r\n        let usersList = this.state.usersList;\r\n        let user = {\r\n            name: this.inputValue.value,\r\n            id: Date.now()\r\n        }\r\n\r\n        usersList.push(user);\r\n\r\n        this.setState({ usersList });\r\n\r\n        this.inputValue.value = '';\r\n    }\r\n\r\n    removeUser = (id) => {\r\n        let usersList = this.state.usersList.filter(user => user.id !== id);\r\n\r\n        this.setState({ usersList });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // onUserSeach = () => {\r\n    //     const searchValue = this.searchInputValue.value;\r\n        \r\n\r\n    //     if (searchValue !== '') {\r\n    //         let searchUsersList = this.state.usersList.filter(user => {\r\n    //             return user.name.toLowerCase().includes(searchValue.toLowerCase());\r\n    //         });\r\n\r\n    //         this.setState({ searchUsersList, search });\r\n    //     } else {\r\n    //         this.setState({ usersList });\r\n    //     }\r\n\r\n\r\n    //     console.log(this.searchInputValue.value);\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>&#x02713; <span>Task List</span></h1>\r\n\r\n                <form onSubmit={e => this.addUser(e)}>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='What do you have to do?'\r\n                        ref={input => this.inputValue = input}\r\n                    />\r\n                    <button>Add</button>\r\n                    {/* <br></br>\r\n                    <input\r\n                        className='search'\r\n                        type='text'\r\n                        placeholder='Search'\r\n                        ref={input => this.searchInputValue = input}\r\n                        onSearchChange={this.onUsersearch}\r\n                    /> */}\r\n                </form>\r\n                <UsersList\r\n                    users={this.state.usersList}\r\n                    onRemove={this.removeUser}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","import React, { Component } from 'react';\nimport './App.css';\nimport Users from './Users'\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Users />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}